
##### GENERAL SRG HAMMING FUSIONS############
gap> k:=Indeterminate(Rationals,"k"); 
k
gap> l:=Indeterminate(Rationals,"l");
l
gap> r:=Indeterminate(Rationals,"r");
r
gap> s:=Indeterminate(Rationals,"s");
s
gap> P:=k^0*[[1,k,l],[1,r,(-1-r)],[1,s,(-1-s)]];
[ [ 1, k, l ], [ 1, r, -r-1 ], [ 1, s, -s-1 ] ]
gap> P[3][2]:=Value(P[3][2],[s],[-k*(l-1-r)/((l+k)*r+k)]);
(-k*l+k*r+k)/(k*r+l*r+k)
gap> P[3][3]:=Value(P[3][3],[s],[-k*(l-1-r)/((l+k)*r+k)]);
(k*l-2*k*r-l*r-2*k)/(k*r+l*r+k)
gap> P;
[ [ 1, k, l ], [ 1, r, -r-1 ], [ 1, (-k*l+k*r+k)/(k*r+l*r+k), (k*l-2*k*r-l*r-2*k)/(k*r+l*r+k) ] ]
gap> P1:=KroneckerProduct(P,P);
[ [ 1, k, l, k, k^2, k*l, l, k*l, l^2 ],            
  [ 1, r, -r-1, k, k*r, -k*r-k, l, l*r, -l*r-l ], 
  [ 1, (-k*l+k*r+k)/(k*r+l*r+k), (k*l-2*k*r-l*r-2*k)/(k*r+l*r+k), k, (-k^2*l+k^2*r+k^2)/(k*r+l*r+k), 
      (k^2*l-2*k^2*r-k*l*r-2*k^2)/(k*r+l*r+k), l, (-k*l^2+k*l*r+k*l)/(k*r+l*r+k), (k*l^2-2*k*l*r-l^2*r-2*k*l)/(k*r+l*r+k) ], 
  [ 1, k, l, r, k*r, l*r, -r-1, -k*r-k, -l*r-l ], [ 1, r, -r-1, r, r^2, -r^2-r, -r-1, -r^2-r, r^2+2*r+1 ], 
  [ 1, (-k*l+k*r+k)/(k*r+l*r+k), (k*l-2*k*r-l*r-2*k)/(k*r+l*r+k), r, (-k*l*r+k*r^2+k*r)/(k*r+l*r+k), 
      (k*l*r-2*k*r^2-l*r^2-2*k*r)/(k*r+l*r+k), -r-1, (k*l*r-k*r^2+k*l-2*k*r-k)/(k*r+l*r+k), 
      (-k*l*r+2*k*r^2+l*r^2-k*l+4*k*r+l*r+2*k)/(k*r+l*r+k) ], 
  [ 1, k, l, (-k*l+k*r+k)/(k*r+l*r+k), (-k^2*l+k^2*r+k^2)/(k*r+l*r+k), (-k*l^2+k*l*r+k*l)/(k*r+l*r+k), 
      (k*l-2*k*r-l*r-2*k)/(k*r+l*r+k), (k^2*l-2*k^2*r-k*l*r-2*k^2)/(k*r+l*r+k), (k*l^2-2*k*l*r-l^2*r-2*k*l)/(k*r+l*r+k) ], 
  [ 1, r, -r-1, (-k*l+k*r+k)/(k*r+l*r+k), (-k*l*r+k*r^2+k*r)/(k*r+l*r+k), (k*l*r-k*r^2+k*l-2*k*r-k)/(k*r+l*r+k), 
      (k*l-2*k*r-l*r-2*k)/(k*r+l*r+k), (k*l*r-2*k*r^2-l*r^2-2*k*r)/(k*r+l*r+k), 
      (-k*l*r+2*k*r^2+l*r^2-k*l+4*k*r+l*r+2*k)/(k*r+l*r+k) ], 
  [ 1, (-k*l+k*r+k)/(k*r+l*r+k), (k*l-2*k*r-l*r-2*k)/(k*r+l*r+k), (-k*l+k*r+k)/(k*r+l*r+k), 
      (k^2*l^2-2*k^2*l*r+k^2*r^2-2*k^2*l+2*k^2*r+k^2)/(k^2*r^2+2*k*l*r^2+l^2*r^2+2*k^2*r+2*k*l*r+k^2), 
      (-k^2*l^2+3*k^2*l*r-2*k^2*r^2+k*l^2*r-k*l*r^2+3*k^2*l-4*k^2*r-k*l*r-2*k^2)/(k^2*r^2+2*k*l*r^2+l^2*r^2+2*k^2*r+2*k*l*r+k\
^2), (k*l-2*k*r-l*r-2*k)/(k*r+l*r+k), 
      (-k^2*l^2+3*k^2*l*r-2*k^2*r^2+k*l^2*r-k*l*r^2+3*k^2*l-4*k^2*r-k*l*r-2*k^2)/(k^2*r^2+2*k*l*r^2+l^2*r^2+2*k^2*r+2*k*l*r+k\
^2), (k^2*l^2-4*k^2*l*r+4*k^2*r^2-2*k*l^2*r+4*k*l*r^2+l^2*r^2-4*k^2*l+8*k^2*r+4*k*l*r+4*k^2)/(k^2*r^2+2*k*l*r^2+l^2*r^2+2*k^2\
*r+2*k*l*r+k^2) ] ]

gap> P2:=TransposedMat(P1);
[ [ 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ k, r, (-k*l+k*r+k)/(k*r+l*r+k), k, r, (-k*l+k*r+k)/(k*r+l*r+k), k, r, 
      (-k*l+k*r+k)/(k*r+l*r+k) ], [ l, -r-1, (k*l-2*k*r-l*r-2*k)/(k*r+l*r+k), l, -r-1, (k*l-2*k*r-l*r-2*k)/(k*r+l*r+k), l, 
      -r-1, (k*l-2*k*r-l*r-2*k)/(k*r+l*r+k) ], [ k, k, k, r, r, r, (-k*l+k*r+k)/(k*r+l*r+k), (-k*l+k*r+k)/(k*r+l*r+k), 
      (-k*l+k*r+k)/(k*r+l*r+k) ], [ k^2, k*r, (-k^2*l+k^2*r+k^2)/(k*r+l*r+k), k*r, r^2, (-k*l*r+k*r^2+k*r)/(k*r+l*r+k), 
      (-k^2*l+k^2*r+k^2)/(k*r+l*r+k), (-k*l*r+k*r^2+k*r)/(k*r+l*r+k), 
      (k^2*l^2-2*k^2*l*r+k^2*r^2-2*k^2*l+2*k^2*r+k^2)/(k^2*r^2+2*k*l*r^2+l^2*r^2+2*k^2*r+2*k*l*r+k^2) ], 
  [ k*l, -k*r-k, (k^2*l-2*k^2*r-k*l*r-2*k^2)/(k*r+l*r+k), l*r, -r^2-r, (k*l*r-2*k*r^2-l*r^2-2*k*r)/(k*r+l*r+k), 
      (-k*l^2+k*l*r+k*l)/(k*r+l*r+k), (k*l*r-k*r^2+k*l-2*k*r-k)/(k*r+l*r+k), 
      (-k^2*l^2+3*k^2*l*r-2*k^2*r^2+k*l^2*r-k*l*r^2+3*k^2*l-4*k^2*r-k*l*r-2*k^2)/(k^2*r^2+2*k*l*r^2+l^2*r^2+2*k^2*r+2*k*l*r+k\
^2) ], [ l, l, l, -r-1, -r-1, -r-1, (k*l-2*k*r-l*r-2*k)/(k*r+l*r+k), (k*l-2*k*r-l*r-2*k)/(k*r+l*r+k), 
      (k*l-2*k*r-l*r-2*k)/(k*r+l*r+k) ], 
  [ k*l, l*r, (-k*l^2+k*l*r+k*l)/(k*r+l*r+k), -k*r-k, -r^2-r, (k*l*r-k*r^2+k*l-2*k*r-k)/(k*r+l*r+k), 
      (k^2*l-2*k^2*r-k*l*r-2*k^2)/(k*r+l*r+k), (k*l*r-2*k*r^2-l*r^2-2*k*r)/(k*r+l*r+k), 
      (-k^2*l^2+3*k^2*l*r-2*k^2*r^2+k*l^2*r-k*l*r^2+3*k^2*l-4*k^2*r-k*l*r-2*k^2)/(k^2*r^2+2*k*l*r^2+l^2*r^2+2*k^2*r+2*k*l*r+k\
^2) ], [ l^2, -l*r-l, (k*l^2-2*k*l*r-l^2*r-2*k*l)/(k*r+l*r+k), -l*r-l, r^2+2*r+1, 
      (-k*l*r+2*k*r^2+l*r^2-k*l+4*k*r+l*r+2*k)/(k*r+l*r+k), (k*l^2-2*k*l*r-l^2*r-2*k*l)/(k*r+l*r+k), 
      (-k*l*r+2*k*r^2+l*r^2-k*l+4*k*r+l*r+2*k)/(k*r+l*r+k), 
      (k^2*l^2-4*k^2*l*r+4*k^2*r^2-2*k*l^2*r+4*k*l*r^2+l^2*r^2-4*k^2*l+8*k^2*r+4*k*l*r+4*k^2)/(k^2*r^2+2*k*l*r^2+l^2*r^2+2*k^\
2*r+2*k*l*r+k^2) ] ]
gap> for Q in PartitionsSet([2..9]) do Q1:=UnionSet([[1]],Q);
> D:=[]; for i1 in [1..Length(Q1)] do D[i1]:=0*P2[1]; for j1 in [1..Length(Q1[i1])] do D[i1]:=D[i1]+P2[Q1[i1][j1]]; od; od;
> D2:=AsSet(TransposedMat(D)); if Length(D2)=Length(Q1) then Print(Q1,"\n"); fi; od;
[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 7 ], [ 5, 8 ], [ 6, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 6 ], [ 7 ], [ 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4, 7 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 7 ], [ 5 ], [ 6, 8 ], [ 9 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4, 7 ] ]
gap> quit;
# Let S={I,A,A'} be a symmetric rank 3 AS.  For a general S, the above 10 fusions of S \tensor S are guaranteed. 
#Assume C1=I \tensor I; C2=A \tensor I, C3=A' \tensor I, C4=I \tensor A 
#C5=A \tensor A; C6=A \tensor A', C7=I \tensor A', C8=A' \tensor A, C9=A' \tensor A'
# The fusion [ [ 1 ], [ 2, 4 ], [ 3, 7 ], [ 5 ], [ 6, 8 ], [ 9 ] ] represents Sym^2(S)=H(2,S).
# The fusions [ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4 ], [ 7 ] ] and [ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] are 
# the two copies of the wreath product scheme S wr S.  In general, if S={A0,A1,...,Ad} and T={B0,B1,...Be} are ASs, S wr T is 
# the fusion of S \tensor T with elements Ai \otimes B0, i=0,1,...,d, and S^+ \tensor Bj, j=1,...,e.  The wreath product itself
# has fusions induced by the trivial fusion of S and the trivial fusion of T.
# The fusion [ [ 1 ], [ 2, 3, 4, 7 ], [ 5, 6, 8, 9 ] ] is the 'homogeneous fusion', where elements of the same 'degree' are fused -
# we calculate degree of a tensor by summing the degrees of its components, with degree I = 0 and degree A,A' = 1.  This will be 
# a fusion of Sym^2(A). 
# I have yet to make sense of the other maximal fusion [ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 6 ], [ 7 ], [ 8, 9 ] ].


############SPECIAL CASE PAYLEY GRAPHS#######################
gap> q:=Indeterminate(Rationals,"q"); 
gap> P1:=[[1,q,q],[1,(-1+q)/2,(-1-q)/2],[1,(-1-q)/2,(-1+q)/2]];

gap> P1;
gap> P2:=KroneckerProduct(P1,P1);
[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 7 ], [ 5, 8 ], [ 6, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 6 ], [ 7 ], [ 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 7 ], [ 5, 9 ], [ 6, 8 ] ]
[ [ 1 ], [ 2, 3, 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 7 ], [ 5, 6, 8, 9 ] ]-trivial
[ [ 1 ], [ 2, 3, 4, 7 ], [ 5, 9 ], [ 6, 8 ] ]-non-simple fusion(rank 4 one in our list)
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4, 7 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 7 ], [ 5 ], [ 6, 8 ], [ 9 ] ]- Hamming Scheme
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4, 7 ] ]
[ [ 1 ], [ 2, 7 ], [ 3, 4 ], [ 5, 9 ], [ 6 ], [ 8 ] ]


#######################Special case Johnson J(n,2)##########################
gap> P:=n^0*[[1,2*(n-2),1/2*(n-2)*(n-3)], [1,n-4, -(n-3)], [1,-2,1]];
[ [ 1, 2*n-4, 1/2*n^2-5/2*n+3 ], [ 1, n-4, -n+3 ], [ 1, -2, 1 ] ]
gap> P2:=KroneckerProduct(P,P);
[ [ 1, 2*n-4, 1/2*n^2-5/2*n+3, 2*n-4, 4*n^2-16*n+16, n^3-7*n^2+16*n-12, 1/2*n^2-5/2*n+3, n^3-7*n^2+16
      1/4*n^4-5/2*n^3+37/4*n^2-15*n+9 ], [ 1, n-4, -n+3, 2*n-4, 2*n^2-12*n+16, -2*n^2+10*n-12, 1/2*n^
      1/2*n^3-9/2*n^2+13*n-12, -1/2*n^3+4*n^2-21/2*n+9 ],
  [ 1, -2, 1, 2*n-4, -4*n+8, 2*n-4, 1/2*n^2-5/2*n+3, -n^2+5*n-6, 1/2*n^2-5/2*n+3 ],
  [ 1, 2*n-4, 1/2*n^2-5/2*n+3, n-4, 2*n^2-12*n+16, 1/2*n^3-9/2*n^2+13*n-12, -n+3, -2*n^2+10*n-12,
      -1/2*n^3+4*n^2-21/2*n+9 ], [ 1, n-4, -n+3, n-4, n^2-8*n+16, -n^2+7*n-12, -n+3, -n^2+7*n-12, n^2
  [ 1, -2, 1, n-4, -2*n+8, n-4, -n+3, 2*n-6, -n+3 ],
  [ 1, 2*n-4, 1/2*n^2-5/2*n+3, -2, -4*n+8, -n^2+5*n-6, 1, 2*n-4, 1/2*n^2-5/2*n+3 ],
  [ 1, n-4, -n+3, -2, -2*n+8, 2*n-6, 1, n-4, -n+3 ], [ 1, -2, 1, -2, 4, -2, 1, -2, 1 ] ]
gap> P3:=TransposedMat(P2);
[ [ 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 2*n-4, n-4, -2, 2*n-4, n-4, -2, 2*n-4, n-4, -2 ],
  [ 1/2*n^2-5/2*n+3, -n+3, 1, 1/2*n^2-5/2*n+3, -n+3, 1, 1/2*n^2-5/2*n+3, -n+3, 1 ],
  [ 2*n-4, 2*n-4, 2*n-4, n-4, n-4, n-4, -2, -2, -2 ],
  [ 4*n^2-16*n+16, 2*n^2-12*n+16, -4*n+8, 2*n^2-12*n+16, n^2-8*n+16, -2*n+8, -4*n+8, -2*n+8, 4 ],
  [ n^3-7*n^2+16*n-12, -2*n^2+10*n-12, 2*n-4, 1/2*n^3-9/2*n^2+13*n-12, -n^2+7*n-12, n-4, -n^2+5*n-6,
  [ 1/2*n^2-5/2*n+3, 1/2*n^2-5/2*n+3, 1/2*n^2-5/2*n+3, -n+3, -n+3, -n+3, 1, 1, 1 ],
  [ n^3-7*n^2+16*n-12, 1/2*n^3-9/2*n^2+13*n-12, -n^2+5*n-6, -2*n^2+10*n-12, -n^2+7*n-12, 2*n-6, 2*n-4
  [ 1/4*n^4-5/2*n^3+37/4*n^2-15*n+9, -1/2*n^3+4*n^2-21/2*n+9, 1/2*n^2-5/2*n+3, -1/2*n^3+4*n^2-21/2*n+
      -n+3, 1/2*n^2-5/2*n+3, -n+3, 1 ] ]
gap> for Q in PartitionsSet([2..9]) do Q1:=UnionSet([[1]],Q);
> D:=[]; for i1 in [1..Length(Q1)] do D[i1]:=0*P2[1]; for j1 in [1..Length(Q1[i1])] do D[i1]:=D[i1]+Pod;
> D2:=AsSet(TransposedMat(D)); if Length(D2)=Length(Q1) then Print(Q1,"\n"); fi; od;

[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 7 ], [ 5, 8 ], [ 6, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 6 ], [ 7 ], [ 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 7 ], [ 5, 6, 8, 9 ] ]-trivial fusion
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4, 7 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 7 ], [ 5 ], [ 6, 8 ], [ 9 ] ]- Hamming Scheme
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4, 7 ] ]

###############################SPECIAL CASE COMPLETE BIPATITIE=H(d,q)=dK_q-1########################################################3


gap> P1:=n^0*[[1,n-1,n*(q-1)],[1,n-1,-n],[1,-1,0]];
[ [ 1, n-1, q*n-n ], [ 1, n-1, -n ], [ 1, -1, 0 ] ]
gap> P2:=KroneckerProduct(P1,P1);
[ [ 1, n-1, q*n-n, n-1, n^2-2*n+1, q*n^2-q*n-n^2+n, q*n-n, q*n^2-q*n-n^2+n, q^2*n^2-2*q*n^2+n^2 ],
  [ 1, n-1, -n, n-1, n^2-2*n+1, -n^2+n, q*n-n, q*n^2-q*n-n^2+n, -q*n^2+n^2 ],
  [ 1, -1, 0, n-1, -n+1, 0, q*n-n, -q*n+n, 0 ],
  [ 1, n-1, q*n-n, n-1, n^2-2*n+1, q*n^2-q*n-n^2+n, -n, -n^2+n, -q*n^2+n^2 ],
  [ 1, n-1, -n, n-1, n^2-2*n+1, -n^2+n, -n, -n^2+n, n^2 ], [ 1, -1, 0, n-1, -n+1, 0, -n, n, 0 ],
  [ 1, n-1, q*n-n, -1, -n+1, -q*n+n, 0, 0, 0 ], [ 1, n-1, -n, -1, -n+1, n, 0, 0, 0 ],
  [ 1, -1, 0, -1, 1, 0, 0, 0, 0 ] ]
gap> P3:=TransposedMat(P2);
[ [ 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ n-1, n-1, -1, n-1, n-1, -1, n-1, n-1, -1 ],
  [ q*n-n, -n, 0, q*n-n, -n, 0, q*n-n, -n, 0 ], [ n-1, n-1, n-1, n-1, n-1, n-1, -1, -1, -1 ],
  [ n^2-2*n+1, n^2-2*n+1, -n+1, n^2-2*n+1, n^2-2*n+1, -n+1, -n+1, -n+1, 1 ],
  [ q*n^2-q*n-n^2+n, -n^2+n, 0, q*n^2-q*n-n^2+n, -n^2+n, 0, -q*n+n, n, 0 ],
  [ q*n-n, q*n-n, q*n-n, -n, -n, -n, 0, 0, 0 ], [ q*n^2-q*n-n^2+n, q*n^2-q*n-n^2+n, -q*n+n, -n^2+n, -
      0 ], [ q^2*n^2-2*q*n^2+n^2, -q*n^2+n^2, 0, -q*n^2+n^2, n^2, 0, 0, 0, 0 ] ]
gap> for Q in PartitionsSet([2..9]) do Q1:=UnionSet([[1]],Q);
> D:=[]; for i1 in [1..Length(Q1)] do D[i1]:=0*P3[1]; for j1 in [1..Length(Q1[i1])] do D[i1]:=D[i1]+Pod;
> D2:=AsSet(TransposedMat(D)); if Length(D2)=Length(Q1) then Print(Q1,"\n"); fi; od;
[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7, 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5 ], [ 6 ], [ 7, 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5 ], [ 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 7, 8 ], [ 6, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 7 ], [ 5, 8 ], [ 6, 9 ] ]
[ [ 1 ], [ 2 ], [ 3, 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3, 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3, 6 ], [ 4 ], [ 5 ], [ 7 ], [ 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3, 6 ], [ 4 ], [ 5 ], [ 7, 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3, 6 ], [ 4 ], [ 5 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3, 6 ], [ 4, 5 ], [ 7, 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3, 6 ], [ 4, 5 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3, 6, 7, 8 ], [ 4 ], [ 5 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3, 6, 7, 8 ], [ 4, 5 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3, 6, 7, 8, 9 ], [ 4 ], [ 5 ] ]
[ [ 1 ], [ 2 ], [ 3, 6, 7, 8, 9 ], [ 4, 5 ] ]
[ [ 1 ], [ 2 ], [ 3, 6, 9 ], [ 4 ], [ 5 ], [ 7 ], [ 8 ] ]
[ [ 1 ], [ 2 ], [ 3, 6, 9 ], [ 4 ], [ 5 ], [ 7, 8 ] ]
[ [ 1 ], [ 2 ], [ 3, 6, 9 ], [ 4, 5 ], [ 7, 8 ] ]
[ [ 1 ], [ 2 ], [ 3, 6, 9 ], [ 4, 5, 7, 8 ] ]
[ [ 1 ], [ 2 ], [ 3, 6, 9 ], [ 4, 7 ], [ 5, 8 ] ]
[ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 6 ], [ 7 ], [ 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 7 ], [ 5, 6, 8, 9 ] ]- Trivial/simple
[ [ 1 ], [ 2, 3, 5, 6 ], [ 4 ], [ 7 ], [ 8, 9 ] ]
[ [ 1 ], [ 2, 3, 5, 6 ], [ 4 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 7, 8, 9 ], [ 4 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4, 7 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 6 ], [ 5 ], [ 7, 8 ], [ 9 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 6 ], [ 5 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 6, 7, 8 ], [ 5 ], [ 9 ] ]- fusion 
[ [ 1 ], [ 2, 4 ], [ 3, 6, 7, 8, 9 ], [ 5 ] ]-fusion 
[ [ 1 ], [ 2, 4 ], [ 3, 6, 9 ], [ 5 ], [ 7, 8 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 7 ], [ 5 ], [ 6, 8 ], [ 9 ] ]- Hamming scheme
[ [ 1 ], [ 2, 4, 5 ], [ 3, 6 ], [ 7, 8 ], [ 9 ] ]
[ [ 1 ], [ 2, 4, 5 ], [ 3, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 4, 5 ], [ 3, 6, 7, 8 ], [ 9 ] ]- fusion
[ [ 1 ], [ 2, 4, 5 ], [ 3, 6, 7, 8, 9 ] ]-fusion
[ [ 1 ], [ 2, 4, 5 ], [ 3, 6, 9 ], [ 7, 8 ] ]
[ [ 1 ], [ 2, 4, 5, 7, 8 ], [ 3, 6, 9 ] ]
[ [ 1 ], [ 2, 5 ], [ 3, 6 ], [ 4 ], [ 7 ], [ 8 ], [ 9 ] ]
[ [ 1 ], [ 2, 5 ], [ 3, 6 ], [ 4 ], [ 7, 8 ], [ 9 ] ]
[ [ 1 ], [ 2, 5 ], [ 3, 6 ], [ 4 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 5 ], [ 3, 6, 7, 8 ], [ 4 ], [ 9 ] ]
[ [ 1 ], [ 2, 5 ], [ 3, 6, 7, 8, 9 ], [ 4 ] ]
[ [ 1 ], [ 2, 5 ], [ 3, 6, 9 ], [ 4 ], [ 7 ], [ 8 ] ]
[ [ 1 ], [ 2, 5 ], [ 3, 6, 9 ], [ 4 ], [ 7, 8 ] ]
[ [ 1 ], [ 2, 5, 7, 8 ], [ 3, 6, 9 ], [ 4 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4, 7 ] ]


